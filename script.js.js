// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π WebSocket –∏ axios.
const WebSocket = require("ws");
const axios = require("axios");

// –û–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const TELEGRAM_TOKEN = "YOIR_TOKEN";
const TELEGRAM_CHAT_ID = "@YOUR_ID";
const WS_URL = "wss://fstream.binance.com/stream?streams=!miniTicker@arr";

/*–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è pairDataCache –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞–º–∏ PairData.
–ö–∞–∂–¥–∞—è –ø–∞—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ (—Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ), –æ–±—ä–µ–º–µ –∑–∞ 24 —á–∞—Å–∞, —Ü–µ–Ω–µ –∏ –¥—Ä—É–≥–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö.
–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–≠—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞.
*/
const pairDataCache = {};
/*
–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è wsStartTime –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏,
–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
–í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ—à–ª–æ –ª–∏ –º–µ–Ω–µ–µ 15 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —É—Å–ª–æ–≤–∏—è.
*/
let wsStartTime;

/*
–°–æ–∑–¥–∞—ë—Ç—Å—è –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è websocketHandler, –∫–æ—Ç–æ—Ä–∞—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket —Å–µ—Ä–≤–µ—Ä–æ–º,
–¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π open, message, close –∏ error.
*/

async function websocketHandler() {
  const ws = new WebSocket(WS_URL);
  wsStartTime = new Date();

  ws.on("open", () => console.log("WebSocket connection is done‚ô•"));
  ws.on("message", handleWebSocketMessage);
  ws.on("close", handleWebSocketClose);
  ws.on("error", handleWebSocketError);
}

/*
–û–±—ä—è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è handleWebSocketMessage, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞.
–í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è, –∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è checkAndSendMessage –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.  
*/

async function handleWebSocketMessage(response) {
  try {
    const data = JSON.parse(response).data;  
    for (const item of data) {
      const { s: symbol, q: volume_24h, c: price } = item;
      if (symbol.endsWith("USDT")) {           // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–∞—Ä —Å–æ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞–º–∏, –∫—Ä–æ–º–µ USDT.
        let pairData = pairDataCache[symbol];  // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç PairData –∏–∑ –∫–µ—à–∞ pairDataCache –ø–æ —Å–∏–º–≤–æ–ª—É, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!pairData) {                       
          pairData = new PairData(symbol);     
          pairDataCache[symbol] = pairData;
        }
        pairData.last_price = parseFloat(price);
        await checkAndSendMessage(  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é checkAndSendMessage, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤ –Ω–µ–µ –æ–±—ä–µ–∫—Ç PairData –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –∞ —Ç–∞–∫–∂–µ –æ–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞ –∏ —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞.
          pairData,
          symbol,
          parseFloat(volume_24h),
          parseFloat(price)
        );
      }
    }
  } catch (error) {
    console.error("Error processing WebSocket message:", error);
  }
}

/*
–û–±—ä—è–≤–ª—è—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ handleWebSocketClose –∏ handleWebSocketError,
–∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏.
*/

function handleWebSocketClose() {
  console.log("WebSocket connection closed");
}

function handleWebSocketError(error) {
  console.error("WebSocket error:", error);
}

// –ö–ª–∞—Å—Å PairData, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ

class PairData {
  constructor(symbol) {
    this.symbol = symbol;
    this.volume_24h_start = null;
    this.volume_24h_start_time = null;
    this.price_start = null;
    this.last_price = null;
    this.signal_count = 0;
    this.open_interest_start = null;
    this.open_interest_start_time = null;
  }
}

/*
–í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è checkAndSendMessage,
–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
*/

async function checkAndSendMessage(pairData, symbol, openInterest, price) {
  if (!pairData.open_interest_start) {
    pairData.open_interest_start = openInterest;
    pairData.open_interest_start_time = new Date();
  }

  const timeDifference = new Date() - wsStartTime;
  if (timeDifference <= 15 * 60 * 1000) {
    const openInterestChangePercent =
      ((openInterest - pairData.open_interest_start) /
        pairData.open_interest_start) *
      100;
    if (openInterestChangePercent >= 5) {
      if (!pairData.price_start) {
        pairData.price_start = price;
      } else {
        const priceChangePercent =
          ((price - pairData.price_start) / pairData.price_start) * 100;
        pairData.signal_count += 1;

        const message = generateTelegramMessage(
          symbol,
          openInterestChangePercent,
          priceChangePercent,
          pairData.signal_count
        );
        await sendTelegramMessage(message);

        pairData.open_interest_start = openInterest;
        pairData.open_interest_start_time = new Date();
        pairData.price_start = price;
      }
    }
  }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è generateTelegramMessage, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º.

function generateTelegramMessage(
  symbol,
  openInterestChangePercent,
  priceChangePercent,
  signalCount
) {
  return (
    `üî∏Binance ${symbol}\n` +
    `üìà–†–æ—Å—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞: ${openInterestChangePercent.toFixed(2)}%\n` +
    `üìä–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${priceChangePercent.toFixed(2)}%\n` +
    `üîò–°–∏–≥–Ω–∞–ª –∑–∞ —Å—É—Ç–∫–∏: ${signalCount}`
  );
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è sendTelegramMessage, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API.

async function sendTelegramMessage(message) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${encodeURIComponent(
    message
  )}`;
  await axios.get(url);
}

// A—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç websocketHandler

async function main() {
  await websocketHandler();
}

main();     // main() –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
